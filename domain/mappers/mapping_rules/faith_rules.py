"""
フェイスシステム用マッピングルール定義

フェイスオートコール・SMS処理で使用される各種マッピングルールを定義します。
契約者、保証人、緊急連絡人、SMS用のルールを管理します。
"""

from typing import Dict, Any, Callable


# 契約者用マッピングルール
CONTRACT_MAPPING_RULES = {
    "電話番号": "TEL携帯",
    "架電番号": "TEL携帯",
    "入居ステータス": "入居ステータス",
    "滞納ステータス": "滞納ステータス",
    "管理番号": "管理番号",
    "契約者名（カナ）": "契約者カナ",
    "物件名": "物件名"
    # 「残債」列は空白で統一（フェイスは残債表示なし）
}

# 契約者用デフォルト値
CONTRACT_DEFAULT_VALUES = {
    "連番": "",
    "架電日": "",
    "架電月": "",
    "架電番号カウント": "",
    "通話秒数": "",
    "ステータス": "",
    "架電結果": "",
    "残債": "",  # フェイスは空白
    "督促状況": "TEL",
    "商品種別": "",
    "約束日": "",
    "入金日": "",
    "約束金額（税込）": "",
    "入金金額（税込）": "",
    "連絡": "",
    "氏名": "",
    "履歴数": "",
    "架電備考": "",
    "入居日": "",
    "法人名": "",
    "施策日": "",
    "遅延日数": 0,
    "架電結果_督促停止": "",
    "督促停止日": "",
    "備考欄": "",
    "担当者": "",
    "最終更新日": "",
    "最終更新担当者": ""
}

# 保証人用マッピングルール
GUARANTOR_MAPPING_RULES = {
    "電話番号": "TEL携帯.1",  # 保証人は.1を使用
    "架電番号": "TEL携帯.1",
    "入居ステータス": "入居ステータス",
    "滞納ステータス": "滞納ステータス",
    "管理番号": "管理番号",
    "契約者名（カナ）": "契約者カナ",
    "物件名": "物件名"
}

# 保証人用デフォルト値（契約者と同じ）
GUARANTOR_DEFAULT_VALUES = CONTRACT_DEFAULT_VALUES.copy()

# 緊急連絡人用マッピングルール
EMERGENCY_MAPPING_RULES = {
    "電話番号": "TEL携帯.2",  # 緊急連絡人は.2を使用
    "架電番号": "TEL携帯.2",
    "入居ステータス": "入居ステータス",
    "滞納ステータス": "滞納ステータス",
    "管理番号": "管理番号",
    "契約者名（カナ）": "契約者カナ",
    "物件名": "物件名"
}

# 緊急連絡人用デフォルト値（契約者と同じ）
EMERGENCY_DEFAULT_VALUES = CONTRACT_DEFAULT_VALUES.copy()

# SMS用マッピングルール（退去済み契約者）
SMS_MAPPING_RULES = {
    # A-L列（基本情報）
    "契約No": "管理番号",
    "賃借人1": "契約者氏名",
    "賃借人1電話番号": "TEL携帯",
    # 他の列は外部テンプレートから読み込み
}

# SMS用デフォルト値
SMS_DEFAULT_VALUES = {
    "フリガナ1": "",
    "賃借人2": "",
    "フリガナ2": "",
    "賃借人2電話番号": "",
    "緊急連絡先": "",
    "緊急連絡先フリガナ": "",
    "緊急連絡先電話番号": "",
    "緊急連絡先関係": "",
    "種別": "テキスト",  # 固定値
    "トリガー": "即時",  # 固定値
    # 他の列は動的に設定
}

# カスタム変換関数
def generate_faith_client_name(data: Dict[str, Any]) -> str:
    """
    委託先法人IDからクライアント名を生成
    
    Args:
        data: 入力データ
        
    Returns:
        クライアント名（例: "フェイス1", "フェイス2"）
    """
    if "委託先法人ID" in data and data["委託先法人ID"]:
        try:
            client_id = int(data["委託先法人ID"])
            if 1 <= client_id <= 4:
                return f"フェイス{client_id}"
        except (ValueError, TypeError):
            pass
    return ""

def format_phone_for_sms(data: Dict[str, Any]) -> str:
    """
    SMS用電話番号フォーマット（090/080/070形式のみ）
    
    Args:
        data: 入力データ
        
    Returns:
        フォーマット済み電話番号（ハイフンなし）
    """
    if "TEL携帯" in data and data["TEL携帯"]:
        phone = str(data["TEL携帯"]).strip()
        # ハイフンを除去
        phone = phone.replace("-", "").replace(" ", "")
        # 090/080/070で始まる11桁のみ許可
        if len(phone) == 11 and phone[:3] in ["090", "080", "070"]:
            return phone
    return ""