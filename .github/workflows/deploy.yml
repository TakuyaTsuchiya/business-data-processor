name: Test and Deploy to Production
on:
  push:
    branches: [main]
    paths:
      - '**.py'
      - 'requirements.txt'
      - 'requirements-test.txt'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - '.github/workflows/**'
      - 'tests/**'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Run all tests
        run: |
          echo "🧪 Running all tests..."
          python -m pytest tests/ -v --tb=short --maxfail=10 --continue-on-collection-errors

      - name: Generate test coverage report
        run: |
          echo "📊 Generating test coverage report..."
          python -m pytest tests/ --cov=processors --cov-report=term-missing --cov-report=html --cov-fail-under=0
        continue-on-error: true

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('htmlcov/**') != ''
        with:
          name: coverage-report
          path: htmlcov/
        continue-on-error: true

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            echo "=== Starting deployment at $(date) ==="
            
            # Navigate to application directory
            cd /home/ubuntu/apps/business-data-processor
            
            # Pull latest code
            echo "Pulling latest code..."
            git pull origin main
            
            # Stop current containers
            echo "Stopping current containers..."
            docker-compose down
            
            # Build and start new containers
            echo "Building and starting new containers..."
            docker-compose up -d --build
            
            # Wait for application to start
            echo "Waiting for application to start..."
            sleep 15
            
            # Health check
            echo "Performing health check..."
            if curl -f http://localhost:8501/_stcore/health > /dev/null 2>&1; then
                echo "✅ Health check passed - Application is running"
                echo "🌐 Application available at: https://mirail.net"
            else
                echo "❌ Health check failed - Check application logs"
                docker-compose logs --tail=50
                exit 1
            fi
            
            echo "=== Deployment completed successfully at $(date) ==="

      - name: Notify deployment result
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment completed successfully!"
            echo "🌐 Application: https://mirail.net"
            echo "📅 Deployed at: $(date)"
          else
            echo "❌ Deployment failed!"
            echo "🔍 Check the logs above for details"
          fi

  notify:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify workflow result
        run: |
          echo "=== Workflow Summary ==="
          echo "🔬 Test Status: ${{ needs.test.result }}"
          echo "🚀 Deploy Status: ${{ needs.deploy.result }}"
          echo "📅 Completed at: $(date)"
          
          if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.deploy.result }}" == "success" ]; then
            echo ""
            echo "🎉 Full CI/CD Pipeline Success!"
            echo "✅ All tests passed"
            echo "✅ Deployment completed"
            echo "🌐 Application: https://mirail.net"
          elif [ "${{ needs.test.result }}" == "failure" ]; then
            echo ""
            echo "❌ Pipeline Failed - Tests Failed"
            echo "🔍 Check test logs for details"
            echo "🚫 Deployment was skipped"
          elif [ "${{ needs.deploy.result }}" == "failure" ]; then
            echo ""
            echo "❌ Pipeline Failed - Deployment Failed"
            echo "✅ Tests passed successfully"
            echo "🔍 Check deployment logs for details"
          else
            echo ""
            echo "⚠️ Pipeline completed with mixed results"
            echo "🔍 Check individual job logs for details"
          fi